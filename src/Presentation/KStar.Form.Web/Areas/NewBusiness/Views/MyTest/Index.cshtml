
@{
    ViewBag.Title = "测试流程";
    Layout = "~/Views/Shared/_KStarFormLayout.cshtml";
}


@section HeadStyle{
    <style>
        .helper-inline-block {
            display: inline-block;
        }

        .cell .el-form-item__error.el-form-item__error--inline {
            position: inherit !important;
            bottom: unset !important;
        }
    </style>
}

<el-form :model="vmFormContent" :rules="formContentValidateRules" ref="refFormContent" label-width="120px" inline-message size="mini"
         label-position="left">
    <el-row>
        <el-col>
            <el-form-item label="详细描述：" prop="Remark">
                <el-input type="textarea" :autosize="{ minRows: 3 }" maxlength="500" show-word-limit
                          placeholder=""
                          v-model="vmFormContent.Remark">
                </el-input>
            </el-form-item>
        </el-col>
    </el-row>


</el-form>

@section KStarFormJs{
    <script src="~/Scripts/NewBusiness/CascaderAreaModel.js"></script>
    <script type="text/javascript">
        FormContentModel = {
            totalActualPaySalaryAmount: null
        };
        KStarForm.formModelExtend = {
            data: function () {
                var onlyCity = ArrcascaderAreaAll;
                onlyCity.forEach(function (v) {
                    v.children.forEach(function (v2) {
                        v2.children = null;
                    })
                })
                return {
                    ArrcascaderAreaAll: onlyCity,
                    formContentValidateRules: {
                        'toUpdate.ResearchCycle': {
                            required: true, message: '请选择调研周期'
                        },
                        'toUpdate.ResearchMethod': {
                            required: true, message: '请选择调研方式'
                        },
                        'toUpdate.MarketCategory': {
                            required: true, message: '请选择市场类型'
                        },
                        'toUpdate.Researchers': {
                            required: true, message: '请选择人员'
                        },
                        'toUpdate.ResearchTime': {
                            required: true, message: '请选择调研时间'
                        },
                        'toUpdate.BizStateCategories': {
                            required: true, message: '请选择业态类型'
                        },
                        'toUpdate.Region': {
                            required: true, message: '请选择所在区域'
                        },
                        'toUpdate.City': {
                            required: true, message: '请输入城市'
                        },
                        'toUpdate.ResearchTotal': {
                            required: true, type: 'integer', message: '请输入调研项目总个数'
                        },
                        'toUpdate.CompleteDelegateAmount': {
                            required: true, type: 'integer', message: '请输入全委个数'
                        },
                        'toUpdate.SingleDelegateAmount': {
                            required: true, type: 'integer', message: '请输入单项委托个数'
                        },
                        'toUpdate.MinimumWageStandard': {
                            required: true, type: 'number', message: '请输入当地最低基本工资标准'
                        },
                        'toUpdate.SocialInsurance': {
                            required: true, type: 'number', message: '请输入社保'
                        },
                        'toUpdate.AccumulationFund': {
                            required: true, type: 'number', message: '请输入公积金'
                        },
                        'toUpdate.RiskAssessment': {
                            required: true, message: '请输入风险评估'
                        },
                        'toUpdate.ResearchConclusion': {
                            required: true, message: '请输入调研结论'
                        }
                    },
                    formContentRules: {

                    }
                }
            },
            methods: {
                handleAddBillInfo: function (index, column) {
                    this.vmFormContent.TableBillInfos.push({
                        "ProjectName": null,
                        "ClientName":
                        {
                            Code: null,
                            Name: null
                        },
                        "BusinessType": null,
                        "CostPeriod": null,
                        "PeopleNumber": null,
                        "ActualPaySalaryAmount": null,
                        "SocialInsurance": null,
                        "HousingFund": null,
                        "ServiceFee": null,
                        "Amount": null
                    });
                },
                handleDeleteBillInfo: function (index, row, column) {
                    this.vmFormContent.TableBillInfos.splice(index, 1);
                },

                searchClientInfo: function (v) {
                    var that = this;

                    axios.post(getControllerName() + "/SearchClientInfo", {
                        name: v
                    }).then(function (r) {
                        console.log(r)
                        that.vmFormContent.ListClients = r.data;
                    })
                },

                getSummary: function (param) {
                    var funcFixed = this.$options.filters["transformToFixed"];
                    var that = this;
                    var columns = param.columns;
                    var data = param.data;
                    var sums = [];
                    _.each(columns, function (column, idx) {
                        //debugger
                        if (idx == 0) {
                            sums[0] = '合计';
                            //return;
                        } else if (idx > 4 && idx < 11) {

                            var values = _.map(data, function (val) {
                                var tmp = parseFloat(val[column.property]);
                                return isNaN(tmp) ? 0 : tmp;
                            });

                            var colSum = _.reduce(values, function (prev, v) {
                                return prev + v;
                            });
                            sums[idx] = idx > 5 ? funcFixed(colSum) : colSum;
                            if (idx == 6)
                                that.vmFormContent.totalActualPaySalaryAmount = parseFloat(sums[idx]);
                        } else {
                            sums[idx] = '';
                        }
                    });
                    return sums;
                },

            },
            computed: {
                isFormCanBeEdit: function () {
                    return this.vmFormType == 'Application' || this.vmFormType == 'Draft' || this.vmFormType == 'ReApproval';
                },
                isActAccounting: function () {
                    var curActName = this.vmOperation.ActivityName;
                    return curActName == '会计审核' && this.vmFormType == 'Approval';
                }
            },
            filters: {
                transformToFixed: function (value, fixedCount = 2) {
                    if (!value || isNaN(value) || !isFinite(value)) return '';
                    var x = parseFloat(value);
                    return x.toFixed(fixedCount);
                },
                captialAmount: function (n) {
                    if (!/^(0|[1-9]\d*)(\.\d+)?$/.test(n)) {
                        return ''
                    }
                    var unit = "仟佰拾亿仟佰拾万仟佰拾圆角分", str = "";
                    n += "00";
                    var p = n.indexOf('.');
                    if (p >= 0)
                        n = n.substring(0, p) + n.substr(p + 1, 2);

                    unit = unit.substr(unit.length - n.length);

                    for (var i = 0; i < n.length; i++)
                        str += '零壹贰叁肆伍陆柒捌玖'.charAt(n.charAt(i)) + unit.charAt(i);
                    var result = str.replace(/零(仟|佰|拾|角)/g, "零").replace(/(零)+/g, "零").replace(/零(万|亿|圆)/g, "$1").replace(/(亿)万|壹(拾)/g, "$1$2").replace(/^圆零?|零分/g, "").replace(/圆$/g, "圆整");
                    return result == '分' ? '' : result;
                }
            },
            watch: {
                'vmFormContent.PayMethod': function (nv, ov) {
                    if (nv == '云账户') {
                        this.vmFormContent.AgentCommission = this.vmFormContent.totalActualPaySalaryAmount * 0.071;
                    } else {
                        this.vmFormContent.AgentCommission = 0;
                    }

                    this.vmFormContent.ApplicationAmount = this.vmFormContent.totalActualPaySalaryAmount + this.vmFormContent.AgentCommission;
                },
                'vmFormContent.TableBillInfos': {
                    handler: function (nv) {

                        _.each(nv, function (v, idx) {
                            var peopleNumber = isNaN(parseInt(v.PeopleNumber)) ? 0 : parseInt(v.PeopleNumber);
                            var actualPaySalaryAmount = isNaN(parseFloat(v.ActualPaySalaryAmount)) ? 0 : parseFloat(v.ActualPaySalaryAmount);
                            var socialInsurance = isNaN(parseFloat(v.SocialInsurance)) ? 0 : parseFloat(v.SocialInsurance);
                            var housingFund = isNaN(parseFloat(v.HousingFund)) ? 0 : parseFloat(v.HousingFund);
                            var serviceFee = isNaN(parseFloat(v.ServiceFee)) ? 0 : parseFloat(v.ServiceFee);
                            v.Amount = actualPaySalaryAmount + socialInsurance + housingFund + serviceFee;
                        })
                    },
                    deep: true
                },
                'vmFormContent.totalActualPaySalaryAmount': function (nv) {
                    if (this.vmFormContent.PayMethod == '云账户') {
                        this.vmFormContent.AgentCommission = nv * 0.071;
                    } else {
                        this.vmFormContent.AgentCommission = 0;
                    }

                    this.vmFormContent.ApplicationAmount = nv + this.vmFormContent.AgentCommission;

                }
            },
            mounted: function () {
                // 将账单信息中的客户信息加载到可选列表中，以支持正确显示
                //clientsNeedToAdd = [];
                var currentClientListOptions = this.vmFormContent.ListClients || [];
                _.each(this.vmFormContent.TableBillInfos, function (bill, idx) {
                    if (!bill.ClientName)
                        return false;
                    var clientCode = bill.ClientName.Code;
                    var idxFinded = _.findIndex(currentClientListOptions, function (c) {
                        return c.Code == clientCode;
                    });
                    if (idxFinded == -1) {
                        currentClientListOptions.push(bill.ClientName);
                    }
                });
            }
        }

        var SubmitBefore = function () {
            var canBeSubmit = true;

            //var lineApplyUnit = KStarForm.vmFormData.vmFormContent.lineApplyUnit;
            //if (!lineApplyUnit) {
            //    canBeSubmit = false;
            //    alertInfo("不能获取申请人的申请单位！不能提交！")
            //}
            //var fileCount = KStarForm.vmFormData.vmFormAttachments.length;
            //if (fileCount < 1) {
            //    canBeSubmit = false
            //    alertInfo("必须上传至少一个文件！");
            //}
            return canBeSubmit;
        }
        //发起
        KStarForm.onSubmitBefore = SubmitBefore;
        //重新发起
        KStarForm.onReSubmitBefore = SubmitBefore;
    </script>
}
